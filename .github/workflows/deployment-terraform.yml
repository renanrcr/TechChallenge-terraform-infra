name: 'Deploy Terraform to AWS'

on:
  push:
    branches: [ "main" ]
    paths-ignore:
     - "README.md"

env:
  prod_artifact_name: prod_tfplan-${{ github.ref_name }}-${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  Validation:
    name: Validate the template
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:          
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
      - name: Setup terraform variables
        run: |-
          cat > pipeline.auto.tfvars <<EOF
          access_key="${{secrets.ACCESS_KEY}}"
          secret_key= "${{secrets.SECRET_KEY}}"
          sqlserver_username="${{secrets.SQLSERVER_USERNAME}}"
          sqlserver_password="${{secrets.SQLSERVER_PASSWORD}}"
          environment="${{secrets.ENVIRONMENT}}"
          region="${{secrets.AWS_REGION}}"
          EOF
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.4
      - name: Prepare environment
        id: tf-init
        run: terraform init
      - name: Terraform fmt
        id: tf-fmt
        run: terraform fmt --recursive
      - name: Terraform validate
        id: tf-validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: tf-plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Update
        uses: actions/github-script@v6
        env:
          PLAN: ${{ steps.tf-plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.tf-fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.tf-init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.tf-validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.tf-plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.tf-plan.outcome == 'failure'
        run: exit 1

  Approval:
    name: Approval
    runs-on: ubuntu-latest
    permissions:
      issues: write
    needs: [Validation]
    steps:
      - name: Manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: renanrcr
          minimum-approvals: 1
        
  DeployProd:
    name: TF apply on Prod AWS account
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [Validation, Approval]
    if: ${{ github.ref }} == "refs/heads/main"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-west-2
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
      - name: Setup terraform variables
        run: |-
          cat > pipeline.auto.tfvars <<EOF
          access_key="${{secrets.ACCESS_KEY}}"
          secret_key= "${{secrets.SECRET_KEY}}"
          sqlserver_username="${{secrets.SQLSERVER_USERNAME}}"
          sqlserver_password="${{secrets.SQLSERVER_PASSWORD}}"
          environment="${{secrets.ENVIRONMENT}}"
          region="${{secrets.AWS_REGION}}"
          EOF
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.4
      - name: Prepare environment
        run: |
          terraform init -backend-config="environments/prod_backend.hcl"
      - name: Download artifact for deployment
        uses: actions/download-artifact@v3
        with:
          name: prod-execution-plan
      - name: Execute terraform apply
        run: terraform apply ${{ env.prod_artifact_name }}

  TestProd:
    name: Check Prod
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [DeployProd]
    if: ${{ github.ref }} == "refs/heads/main"
    steps:
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-west-2
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
      - name: Run some checks
        run: |
           aws ec2 describe-vpcs --filter Name=tag:Name,Values=prodvpc
